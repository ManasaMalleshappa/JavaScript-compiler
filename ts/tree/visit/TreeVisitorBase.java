
package ts.tree.visit;

import ts.tree.*;

import java.util.List;
import java.util.ArrayList;

/**
 * Base implementation for AST visitors. Performs complete traversal but does
 * nothing. Parameterized by return value.
 * <p>
 * The "visit" method is overloaded for every tree node type.
 */
public class TreeVisitorBase<T> implements TreeVisitor<T> {
	/**
	 * Called for every node. Override to add pre- and/or post-processing.
	 * 
	 * @param node
	 *            node to be visited.
	 * @return value generated by visitor.
	 */
	protected T visitNode(final Tree node) {
		return node.apply(this);
	}

	/**
	 * Visit a list of ASTs and return a list of results. (Uses a wildcard to
	 * allow general use, with list of Statements, list of Expressions, etc.)
	 * 
	 * @param nodes
	 *            list to be visited.
	 * @return list of values generated by visitor.
	 */
	protected List<T> visitEach(final Iterable<?> nodes) {
		final List<T> visited = new ArrayList<T>();
		for (final Object node : nodes) {
			visited.add(visitNode((Tree) node));
		}
		return visited;
	}

	/** Visit a BinaryOperator node. Override to provide specific behavior. */
	@Override
	public T visit(final BinaryOperator binaryOperator) {
		visitNode(binaryOperator.getLeft());
		visitNode(binaryOperator.getRight());
		return null;
	}

	/**
	 * Visit an ExpressionStatement node. Override to provide specific behavior.
	 */
	@Override
	public T visit(final ExpressionStatement expressionStatement) {
		visitNode(expressionStatement.getExp());
		return null;
	}

	/** Visit an Identifier node. Override to provide specific behavior. */
	@Override
	public T visit(final Identifier identifier) {
		return null;
	}

	/** Visit a NumericLiteral node. Override to provide specific behavior. */
	@Override
	public T visit(final NumericLiteral numericLiteral) {
		return null;
	}

	/** Visit a PrintStatement node. Override to provide specific behavior. */
	@Override
	public T visit(final PrintStatement printStatement) {
		visitNode(printStatement.getExp());
		return null;
	}

	/** Visit a Program node. Override to provide specific behavior. */
	@Override
	public T visit(final Program program) {
		visitEach(program.getList());
		return null;
	}

	/** Visit a StringLiteral node. Override to provide specific behavior. */
	@Override
	public T visit(final StringLiteral stringLiteral) {
		return null;
	}

	/** Visit a VarStatement node. Override to provide specific behavior. */
	@Override
	public T visit(final VarStatement varStatement) {
		return null;
	}

	/** Visit a UnaryOperator node. Override to provide specific behavior. */
	@Override
	public T visit(UnaryOperator unaryOperator) {
		// TODO Auto-generated method stub
		visitNode(unaryOperator.getAb());
		return null;
	}

	/** Visit a Boolean Literal node. Override to provide specific behavior. */
	@Override
	public T visit(BooleanLiteral booleanLiteral) {
		// TODO Auto-generated method stub
		return null;
	}

	/** Visit a Null Literal node. Override to provide specific behavior. */
	@Override
	public T visit(NullLiteral nullLiteral) {
		// TODO Auto-generated method stub
		return null;
	}

	/** Visit a Empty Statement node. Override to provide specific behavior. */
	@Override
	public T visit(EmptyStatement emptyStatement) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public T visit(BlockStatement blockStatement) {
		// TODO Auto-generated method stub
		visitEach(blockStatement.getList());
		return null;
	}

	@Override
	public T visit(WhileStatement whileStatement) {
		// TODO Auto-generated method stub
		visitNode(whileStatement.getExp());
		visitNode(whileStatement.getS());
		return null;
	}

	@Override
	public T visit(BreakStatement breakStatement) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public T visit(ContinueStatement continueStatement) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public T visit(IfStatement ifStatement) {
		// TODO Auto-generated method stub
		visitNode(ifStatement.getExp());
		visitNode(ifStatement.getS1());
		if (ifStatement.getS2() != null) {
			visitNode(ifStatement.getS2());
		}
		return null;
	}

	@Override
	public T visit(ThrowStatement throwStatement) {

		// TODO Auto-generated method stub
		visitNode(throwStatement.getE());
		return null;
	}

	@Override
	public T visit(FinallyStatement finallyStatement) {
		// TODO Auto-generated method stub
		visitNode(finallyStatement.getS());
		return null;
	}

	@Override
	public T visit(TryStatement tryStatement) {
		// TODO Auto-generated method stub
		// visitNode(tryStatement.getB());
		// visitNode(tryStatement.getC());
		// visitNode(tryStatement.getF());
		if (tryStatement.getF() == null) {
			visitNode(tryStatement.getB());
			visitNode(tryStatement.getC());
		}
		if (tryStatement.getC() == null) {
			visitNode(tryStatement.getB());
			visitNode(tryStatement.getF());
		}
		if (tryStatement.getC() != null && tryStatement.getF() != null) {
			visitNode(tryStatement.getB());
			visitNode(tryStatement.getC());
			visitNode(tryStatement.getF());
		}

		return null;
	}

	@Override
	public T visit(CatchStatement catchStatement) {
		// TODO Auto-generated method stub
		visitNode(catchStatement.getB());
		return null;
	}

	@Override
	public T visit(FunctionExpression functionExpression) {
		// TODO Auto-generated method stub
		visitNode(functionExpression.getB1());
		return null;
	}

	@Override
	public T visit(CallExpression callExpression) {
		// TODO Auto-generated method stub
		visitNode(callExpression.getE1());
		return null;
	}

	@Override
	public T visit(ReturnStatement returnStatement) {
		// TODO Auto-generated method stub
		visitNode(returnStatement.getE());
		return null;
	}

	@Override
	public T visit(ObjLiteral objLiteral) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public T visit(PropAccessor propAccessor) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public T visit(propAssignment propAssignment) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public T visit(NewExpression newExpression) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public T visit(This this1) {
		// TODO Auto-generated method stub
		return null;
	}

}
