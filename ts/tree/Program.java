
package ts.tree;

import ts.Location;
import ts.tree.visit.TreeVisitor;

import java.util.Deque;
import java.util.LinkedList;
import java.util.List;

/**
 * node for the root of the AST.
 *
 */
public final class Program extends Node {
	private List<Statement> list;
	
	private Deque<VarStatement> sc;
	/**
	 * Construct an expression statement.
	 *
	 * @param loc
	 *            the source code location of the expression.
	 * @param list
	 *            list of statements that make up the program
	 */
	public Program(final Location loc, final List<Statement> list) {
		super(loc);
		this.list = list;
	}


	public Deque<VarStatement> getSc() {
		return sc;
	}

	public void setSc(Deque<VarStatement> s) {
		this.sc = s;
	}

	/**
	 * Get the list of statements.
	 *
	 * @return the statement list.
	 */
	public List<Statement> getList() {
		return list;
	}

	/**
	 * Apply a visitor to the node.
	 *
	 * @param visitor
	 *            the visitor to apply.
	 *
	 * @return the value generated by the visitor.
	 */
	@Override
	public <T> T apply(TreeVisitor<T> visitor) {
		return visitor.visit(this);
	}
}
